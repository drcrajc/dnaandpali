# -*- coding: utf-8 -*-
"""dna_palindrome.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MKyD1O7pVaWZJ7k0qobf6XGHx8V-dCP6
"""

import numpy as np
import matplotlib.pyplot as plt

# Define the DNA sequence (replace with your E. coli gene sequence)
sequence = "your_ecoli_gene_sequence_here"

# Define complementary base pairs
complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}

# Function to calculate GC content
def calculate_gc_content(subsequence):
    gc_count = subsequence.count('G') + subsequence.count('C')
    return gc_count / len(subsequence)

# Function to calculate symmetry
def calculate_symmetry(subsequence):
    return np.mean([1 if subsequence[i] == subsequence[-i-1] else 0 for i in range(len(subsequence))])

# Function to calculate Hairpin Loop Score (H)
def calculate_hairpin_loop_score(subsequence):
    # Replace this with your calculation logic
    # Example calculation: Count the number of loops in the hairpin structure
    hairpin_loops = 0
    for i in range(1, len(subsequence) - 1):
        if subsequence[i - 1] != subsequence[i] and subsequence[i] == subsequence[i + 1]:
            hairpin_loops += 1
    return hairpin_loops

# Function to calculate Melting Temperature (Tm)
def calculate_melting_temperature(subsequence):
    # Replace this with your calculation logic
    # Example calculation: Calculate Tm using the nearest-neighbor method
    Tm = 81.5 + 0.41 * (subsequence.count('G') + subsequence.count('C')) - 675 / len(subsequence)
    return Tm

# Function to calculate Free Energy (ΔG)
def calculate_free_energy(subsequence):
    # Replace this with your calculation logic
    # Example calculation: ΔG calculation based on base composition
    # Here, I'm using a simple linear equation as an example
    deltaG = -0.6 * subsequence.count('G') - 0.9 * subsequence.count('C')
    return deltaG

# Function to calculate Palindromic Cleavage Efficiency (E) for E. coli
def calculate_cleavage_efficiency(subsequence):
    # Calculate the number of recognition sites for a restriction enzyme (e.g., EcoRI) in the gene
    recognition_site = "GAATTC"  # EcoRI recognition site
    recognition_site_count = subsequence.upper().count(recognition_site)
    
    # Calculate the length of the gene
    gene_length = len(subsequence)
    
    # Calculate the cleavage efficiency as the ratio of recognition sites to gene length
    E = recognition_site_count / gene_length
    return E

# Function to calculate Probability of Off-Target Cleavage (P) for E. coli
def calculate_off_target_probability(subsequence):
    # Calculate the probability of off-target cleavage based on known factors
    P = 0.1  # A sample value, replace with your calculation
    return P

# Function to calculate Homology Score (Hs) for E. coli
def calculate_homology_score(subsequence):
    # Calculate the homology score based on known factors
    Hs = 0.6  # A sample value, replace with your calculation
    return Hs

# Function to calculate Mutation Frequency (Mf) for E. coli
def calculate_mutation_frequency(subsequence):
    # Calculate the mutation frequency based on known factors
    Mf = 0.05  # A sample value, replace with your calculation
    return Mf

# Initialize variables to count occurrences
palindrome_count = 0

# Default ranges for parameters
# (unchanged)

# Lists to store parameter values
parameter_values = []

# Create a 3x3 grid of subplots
fig, axes = plt.subplots(3, 3, figsize=(12, 12))
fig.suptitle('Parameter Relationships in DNA Palindromes')

# Plot the relationships
# (unchanged)

# Convert the DNA sequence to uppercase
sequence = sequence.upper()

# List to store the palindrome sequences
palindromes = []

# Iterate through the sequence to find palindromes
for start in range(len(sequence)):
    for end in range(start + 4, len(sequence)):  # Adjust the minimum palindrome length as needed
        subsequence = sequence[start:end + 1]
        reverse_complement = ''.join([complement[base] for base in subsequence[::-1]])

        if subsequence == reverse_complement:
            palindrome_count += 1
            palindromes.append(subsequence)

            # Calculate and print parameters for the palindrome
            symmetry = calculate_symmetry(subsequence)
            gc_content = calculate_gc_content(subsequence)
            hairpin_loop_score = calculate_hairpin_loop_score(subsequence)
            melting_temperature = calculate_melting_temperature(subsequence)
            free_energy = calculate_free_energy(subsequence)
            cleavage_efficiency = calculate_cleavage_efficiency(subsequence)
            off_target_probability = calculate_off_target_probability(subsequence)
            homology_score = calculate_homology_score(subsequence)
            mutation_frequency = calculate_mutation_frequency(subsequence)

            print(f"Palindrome {palindrome_count}:")
            print(f"Sequence: {subsequence}")
            print(f"Symmetry (S): {symmetry}")
            print(f"GC Content (G/C): {gc_content:.2%}")
            print(f"Hairpin Loop Score (H): {hairpin_loop_score}")
            print(f"Melting Temperature (Tm): {melting_temperature:.2f} °C")
            print(f"Free Energy (ΔG): {free_energy:.2f} kcal/mol")
            print(f"Palindromic Cleavage Efficiency (E): {cleavage_efficiency:.2%}")
            print(f"Probability of Off-Target Cleavage (P): {off_target_probability:.2%}")
            print(f"Homology Score (Hs): {homology_score}")
            print(f"Mutation Frequency (Mf): {mutation_frequency:.2%}")
            print()

# Print the total palindrome count
print(f"Total Palindromes: {palindrome_count}")

# Show the plots
plt.show()
